{"name":"Wamplay","tagline":"WAMP implementation for the Play! Framework","body":"![Logo](https://raw.github.com/blopker/WAMPlay/master/wamplay.png)\r\n\r\nAbout\r\n-----\r\nThis is a WAMP implementation for the Play! Framework. Use it to add RPC and Pub/Sub websocket functionality to your site!\r\n\r\nGetting Started\r\n---------------\r\n\r\n### Build.scala\r\n\r\nFirst add WAMPlay to appDependencies in the [Build.scala](https://github.com/blopker/WAMPlay/blob/master/sample/rpc/project/Build.scala) file:\r\n\r\n```scala\r\n\"ws.wamplay\" %% \"wamplay\" % \"0.1.0\"\r\n```\r\n\r\nThen add the WAMPlay repo in the same file:\r\n\r\n```scala\r\nval main = play.Project(appName, appVersion, appDependencies).settings(\r\n  resolvers ++= Seq(\"WAMPlay Repository\" at \"http://blopker.github.com/maven-repo/\")\r\n)\r\n```\r\n\r\n### routes\r\n\r\nAdd a WAMP endpoint to your [routes](https://github.com/blopker/WAMPlay/blob/master/sample/rpc/conf/routes) file:\r\n\r\n```\r\n# Send websocket connections to the WAMPlay server\r\nGET     /wamp                     ws.wamplay.controllers.WAMPlayServer.connect()\r\n```\r\n\r\n### WAMPlayController\r\n\r\nCreate a class that extends [WAMPlayController](https://github.com/blopker/WAMPlay/blob/master/sample/rpc/app/controllers/RPC.java). This is where your application will interact with clients. For more information on the annotations check out [Annotations](https://github.com/blopker/WAMPlay/wiki/Annotations).\r\n\r\n```java\r\n@URIPrefix(\"http://example.com/sample\")\r\npublic class SampleController extends WAMPlayContoller {\r\n\r\n\t@onRPC(\"#meaningOfLife\")\r\n\tpublic static String getMeaningOfLife(String sessionID) {\r\n\t\treturn \"Meaning of life is: 42\";\r\n\t}\r\n\r\n\t@onRPC(\"#capital\")\r\n\tpublic static String add(String sessionID, JsonNode[] args) {\r\n\t\tString ans = args[0].asText().toUpperCase();\r\n\t\treturn ans;\r\n\t}\r\n\r\n\t@onSubscribe(\"/chat\")\r\n\tpublic static boolean capitalSubscribe(String sessionID) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t@onPublish(\"/chat\")\r\n\tpublic static JsonNode truncatePublish(String sessionID, JsonNode event) {\r\n\t\treturn Json.toJson(message);\r\n\t}\r\n}\r\n```\r\n\r\n### Global.java\r\n\r\nIn your [Global.java](https://github.com/blopker/WAMPlay/blob/master/sample/rpc/app/Global.java) file override onStart and add your controller to the WAMPlayServer.\r\n\r\n```java\r\npublic class Global extends GlobalSettings {\r\n\t@Override\r\n\tpublic void onStart(Application app) {\r\n\t\tWAMPlayServer.addController(new SampleController());\r\n\t}\r\n}\r\n```\r\n\r\n### Your server is ready!\r\n\r\nNow head over to the [RPC Sample Index](https://github.com/blopker/WAMPlay/blob/master/sample/rpc/app/views/index.scala.html) to see how to use [AutobahnJS](http://autobahn.ws/js) with your new server!\r\n\r\nLimitations\r\n-----------\r\n- No support for prefix messages\r\n\r\n**This is currently in beta state, there may be bugs and the API may change**\r\n\r\nCheck out the [samples](https://github.com/blopker/WAMPlay/tree/master/sample) to see how to include WAMPlay in your app!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}